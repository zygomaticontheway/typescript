import { useFormik } from "formik";
import * as Yup from 'yup';
import styles from './robotForm.module.css'

interface IFormValues {
    model: string,
    creator: string,
    email: string
  }

  const schema = Yup.object().shape({
    model: Yup
    .number()
    .typeError('–≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —Ä–æ–±–æ—Ç')
    .required('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ –º–æ–¥–µ–ª—å')
    .min(100, '—Ç–≤–æ—è –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Ç 100')
    .max(1000, '—Ç–≤–æ—è –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ 1000'),
    creator: Yup
      .string()
      .required('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è'),
    email: Yup
      .string()
      .email('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
      .required('email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
  })

  export default function RobotForm() {
  

    const formik = useFormik({
      initialValues: {
        model: '123',
        creator: 'creator',
        email: 'creator@creator.com'
      } as IFormValues,
      validationSchema:schema, //–¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ Yup
      validateOnChange: false,//–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      onSubmit: (values: IFormValues, {resetForm}) => {
        console.log(values);
        // resetForm();
      }
    })
  
  
    return (
      <>
        <form onSubmit={formik.handleSubmit} className={styles.robotForm}>
          <label>–≠—Ç–æ —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∞ ü§ñ</label>
          <input value={formik.values.model} name='model' onChange={formik.handleChange} type="text" placeholder='your model' />
          <input value={formik.values.creator} name='creator' onChange={formik.handleChange} type="text" placeholder='creator name' />
          <input value={formik.values.email} name='email' onChange={formik.handleChange} type="text" placeholder='email' />
          <button type="submit">send form</button>
        </form>
        <span className={styles.formErrors}>{formik.errors.model}</span>
        <span className={styles.formErrors}>{formik.errors.creator}</span>
        <span className={styles.formErrors}>{formik.errors.email}</span>
      </>
    )
  }